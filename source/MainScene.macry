import Audio;
import Graphics2D;
import Graphics2DText;
import Math;
import Random;
import TwoCansAlpha4;

const X_RES = $var["screen_width"];
const Y_RES = $var["screen_height"];

const LATERAL_ACCELERATION = 0.01;
const LATERAL_DRAG = 0.9;
const LONGITUDINAL_SPEED = 0.01;

const MAX_Z = 10.0;

const SHIP_HALF_WIDTH = 0.2;
const SHIP_HALF_HEIGHT = 0.1;
const SHIP_LENGTH = 0.4;
const TILT_FACTOR = 3.0;

const SHIP_MIN_X = -1.0 + SHIP_HALF_WIDTH;
const SHIP_MAX_X = 1.0 - SHIP_HALF_WIDTH;
const SHIP_MIN_Y = -1.0 + SHIP_HALF_HEIGHT;
const SHIP_MAX_Y = 1.0 - SHIP_HALF_HEIGHT;
const SHIP_MIN_Z = 1.0;
const SHIP_MAX_Z = 2.0;

const LASER_LENGTH = 0.4;
const LASER_SPEED = 0.1;
const LASER_COOLDOWN = 15;

const ENEMY_RADIUS = 0.2;
const ENEMY_HALF_LENGTH = 0.2;
const ENEMY_SPEED = 0.05;
const ENEMY_COOLDOWN = 50;

const ENEMY_MIN_X = -1.0 + ENEMY_RADIUS;
const ENEMY_MAX_X = 1.0 - ENEMY_RADIUS;
const ENEMY_MIN_Y = -1.0 + ENEMY_RADIUS;
const ENEMY_MAX_Y = 1.0 - ENEMY_RADIUS;
const ENEMY_MAX_OMEGA = 0.3;

class Enemy {
	field pos;
	field omega;

	constructor(pos, omega) {
		this.pos = pos;
		this.omega = omega;
	}
}

class MainScene : AbstractScene {
	static field farTopLeft;
	static field farTopRight;
	static field farBottomLeft;
	static field farBottomRight;

	static field laserSound = Audio.SoundResource.loadFromResource("laser.ogg");

	static constructor() {
		MainScene.farTopLeft = ## project # [-1.0, 1.0, MAX_Z] ##;
		MainScene.farTopRight = ## project # [1.0, 1.0, MAX_Z] ##;
		MainScene.farBottomLeft = ## project # [-1.0, -1.0, MAX_Z] ##;
		MainScene.farBottomRight = ## project # [1.0, -1.0, MAX_Z] ##;
		Audio.Music.loadFromResource("music.ogg").play(true);
	}

	field time = 0;
	field pos = [0.0, -0.5, 1.0];
	field vel = [0.0, 0.0, 0.0];
	field laserCooldown = 0;
	field lasers = [];
	field enemyCooldown = 0;
	field enemies = [];

	function update(inputManager, events) {
		++this.time;
		if (this.laserCooldown > 0) {
			--this.laserCooldown;
		}
		if (this.enemyCooldown > 0) {
			--this.enemyCooldown;
		}
		// Move.
		if (inputManager.isKeyPressed(KeyboardKey.RIGHT)) {
			this.vel[0] += LATERAL_ACCELERATION;
		}
		if (inputManager.isKeyPressed(KeyboardKey.LEFT)) {
			this.vel[0] -= LATERAL_ACCELERATION;
		}
		if (inputManager.isKeyPressed(KeyboardKey.UP)) {
			this.vel[1] += LATERAL_ACCELERATION;
		}
		if (inputManager.isKeyPressed(KeyboardKey.DOWN)) {
			this.vel[1] -= LATERAL_ACCELERATION;
		}
		if (inputManager.isKeyPressed(KeyboardKey.Q)) {
			this.vel[2] += LONGITUDINAL_SPEED;
		}
		if (inputManager.isKeyPressed(KeyboardKey.A)) {
			this.vel[2] -= LONGITUDINAL_SPEED;
		}
		// Update position according to velocity.
		this.pos[0] += this.vel[0];
		this.pos[1] += this.vel[1];
		this.pos[2] += this.vel[2];
		// Apply drag.
		this.vel[0] *= LATERAL_DRAG;
		this.vel[1] *= LATERAL_DRAG;
		// Keep the ship in bounds.
		if (this.pos[0] < SHIP_MIN_X) {
			this.pos[0] = SHIP_MIN_X;
			this.vel[0] = 0.0;
		} else if (this.pos[0] > SHIP_MAX_X) {
			this.pos[0] = SHIP_MAX_X;
			this.vel[0] = 0.0;
		}
		if (this.pos[1] < SHIP_MIN_Y) {
			this.pos[1] = SHIP_MIN_Y;
			this.vel[1] = 0.0;
		} else if (this.pos[1] > SHIP_MAX_Y) {
			this.pos[1] = SHIP_MAX_Y;
			this.vel[1] = 0.0;
		}
		if (this.pos[2] < SHIP_MIN_Z) {
			this.pos[2] = 1.0;
			this.vel[2] = 0.0;
		} else if (this.pos[2] > SHIP_MAX_Z) {
			this.pos[2] = SHIP_MAX_Z;
			this.vel[2] = 0.0;
		}
		// Update laser positions.
		for (i = 0; i < this.lasers.length; ++i) {
			this.lasers[i][2] += LASER_SPEED;
			if (this.lasers[i][2] > MAX_Z) {
				this.lasers.remove(i);
				--i;
			}
		}
		// Update enemy positions.
		for (i = 0; i < this.enemies.length; ++i) {
			this.enemies[i].pos[2] -= ENEMY_SPEED;
			if (this.enemies[i].pos[2] < 1.0) {
				this.enemies.remove(i);
				--i;
			}
		}
		// Shoot lasers.
		if (this.laserCooldown == 0 && inputManager.isKeyPressed(KeyboardKey.SPACE)) {
			MainScene.laserSound.play();
			this.lasers.add([this.pos[0] - SHIP_HALF_WIDTH, this.pos[1], this.pos[2]]);
			this.lasers.add([this.pos[0] + SHIP_HALF_WIDTH, this.pos[1], this.pos[2]]);
			this.laserCooldown = LASER_COOLDOWN;
		}
		// Spawn enemies.
		if (this.enemyCooldown == 0) {
			pos =
				[ ENEMY_MIN_X + Random.randomFloat() * (ENEMY_MAX_X - ENEMY_MIN_X)
				, ENEMY_MIN_Y + Random.randomFloat() * (ENEMY_MAX_Y - ENEMY_MIN_Y)
				, MAX_Z
				];
			this.enemies.add(new Enemy(pos, ENEMY_MAX_OMEGA * (1.0 - 2.0 * Random.randomFloat())));
			this.enemyCooldown = ENEMY_COOLDOWN;
		}
		// Check for laser collisions.
		for (laserPos : this.lasers) {
			for (enemy : this.enemies) {
			}
		}
	}

	function render() {
		Graphics2D.Draw.fill(0, 0, 0);

		// Draw spaceship.
		left = ## project # [this.pos[0] - SHIP_HALF_WIDTH, this.pos[1], this.pos[2]] ##;
		right = ## project # [this.pos[0] + SHIP_HALF_WIDTH, this.pos[1], this.pos[2]] ##;
		top = ## project # [this.pos[0], this.pos[1] + SHIP_HALF_HEIGHT, this.pos[2]] ##;
		bottom = ## project # [this.pos[0], this.pos[1] - SHIP_HALF_HEIGHT, this.pos[2]] ##;
		front = ## project #
			[ this.pos[0] + TILT_FACTOR * this.vel[0]
			, this.pos[1] + TILT_FACTOR * this.vel[1]
			, this.pos[2] + SHIP_LENGTH
			] ##;
		## drawLine # left # top ##;
		## drawLine # top # right ##;
		## drawLine # right # bottom ##;
		## drawLine # bottom # left ##;
		## drawLine # left # front ##;
		## drawLine # right # front ##;
		## drawLine # top # front ##;
		## drawLine # bottom # front ##;

		// Draw lasers.
		for (pos : this.lasers) {
			start = ## project # pos ##;
			end = ## project # [pos[0], pos[1], pos[2] + LASER_LENGTH] ##;
			## drawLine # start # end ##;
		}

		// Draw enemies.
		for (enemy : this.enemies) {
			pos = enemy.pos;
			cosT = Math.cos(this.time * enemy.omega);
			sinT = Math.sin(this.time * enemy.omega);
			cosT90 = Math.cos(this.time * enemy.omega + 0.5 * Math.PI);
			sinT90 = Math.sin(this.time * enemy.omega + 0.5 * Math.PI);
			left = ## project # [pos[0] - ENEMY_RADIUS * cosT, pos[1] - ENEMY_RADIUS * sinT, pos[2]] ##;
			right = ## project # [pos[0] + ENEMY_RADIUS * cosT, pos[1] + ENEMY_RADIUS * sinT, pos[2]] ##;
			top = ## project # [pos[0] + ENEMY_RADIUS * cosT90, pos[1] + ENEMY_RADIUS * sinT90, pos[2]] ##;
			bottom = ## project # [pos[0] - ENEMY_RADIUS * cosT90, pos[1] - ENEMY_RADIUS * sinT90, pos[2]] ##;
			front = ## project # [pos[0], pos[1], pos[2] - ENEMY_HALF_LENGTH] ##;
			back = ## project # [pos[0], pos[1], pos[2] + ENEMY_HALF_LENGTH] ##;
			## drawLine # left # top ##;
			## drawLine # top # right ##;
			## drawLine # right # bottom ##;
			## drawLine # bottom # left ##;
			## drawLine # left # front ##;
			## drawLine # top # front ##;
			## drawLine # right # front ##;
			## drawLine # bottom # front ##;
			## drawLine # left # back ##;
			## drawLine # top # back ##;
			## drawLine # right # back ##;
			## drawLine # bottom # back ##;
		}

		// Draw box around world.
		## drawLine # [0.0, 0.0] # MainScene.farTopLeft ##;
		## drawLine # [X_RES, 0.0] # MainScene.farTopRight ##;
		## drawLine # [0.0, Y_RES] # MainScene.farBottomLeft ##;
		## drawLine # [X_RES, Y_RES] # MainScene.farBottomRight ##;
		## drawLine # MainScene.farTopLeft # MainScene.farTopRight ##;
		## drawLine # MainScene.farTopRight # MainScene.farBottomRight ##;
		## drawLine # MainScene.farBottomRight # MainScene.farBottomLeft ##;
		## drawLine # MainScene.farBottomLeft # MainScene.farTopLeft ##;
	}
}
